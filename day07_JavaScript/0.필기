1. 함수
- 자바에서의 메서드 개념과 유사하지만 쉽다.
- 함수의 사용은 함수의 정의(선언)과 함수의 호출로 나뉜다.
- 함수의 정의(선언)방법
    function 함수이름(){
        ...실행할 구문...
    }
- 함수 호출 방법
    함수이름();

1-2. 파라미터(Parameters)
- 자바스크립트에서는 함수의 이름 뒤에 위치한 괄호()안에 파라미터를 기술한다.
    function 함수이름(파라미터){
        ...실행할 구문...
    }

- 파라미터가 있는 함수 호출
    함수이름(파라미터);

1-3. 다중 파라미터
- 자바스크립트 함수의 다중 파라미터
function 함수이름(파라미터1, 파라미터2, ...){
        ...실행할 구문...
    }
- 다중 파라미터가 있는 함수 호출
    함수이름(파라미터1, 파라미터2, ...);
    
1-4. 리턴 값
- 결과 값을 되돌려 주는 값
    function f(x){
        return x+1;
    }

- 호출
    var y = f(5);

1-5. 함수의 실행 중단
- 자바스크립트 함수는 처리 도중 return문을 만나게 되면 그 즉시 실행을 중단한다.
- 이 특성을 이용하여 특정 조건이 충족되지 않을 경우 등에 대한 처리 중단을 목적으로 return문을 사용할 수 있으며, 
리턴값 없이 처리를 중단하고자 하는 경우에는 return키워드만 사용한다.
- 이 때, 값이 없이 리턴 결과를 변수에 대입한 경우, 정의되지 않은 값인 "undefined"가 대입된다.

1-6. 함수 간의 호출
- 자바스크립트 에서도 어떤 함수 안에서 다른 함수를 호출할 수 있다.
- 현재 함수 안에서 호출한 다른 함수의 리턴값을, 현재 함수 안에서 다른 게산을 처리하는데 활용할 수 있다.


2. 추가된 변수 선언 방식
var로 선언된 것은 옛날부터 많이해놓은거라 알고는 있어야한다.
- let, const 
2-1. let과 const의 차이점
- let 은 변수에 재 할당이 가능
- const 변수 재할당 불가능
- 재할당이 필요 없는 상수와 객체에는 const를 사용한다.

3. 주요 내장함수


4. 배열
4-1. 배열이란
- 변수를 그룹으로 묶는 형태의 한 종류로써, 사물함 같은 형태를 갖고 있다.
- 하나의 배열 안에는 같은 종류(데이터 형)의 값들만 저장될 수 있지만,
javascript는 데이터형의 선언을 별도로 하지 않기 때문에 데이터형에 대한 제약은 없다.(메모리 관리측면에서 권장사항이다)
4-2. 배열을 만드는 방법
- 2가지 방법이 있고 차이는 없다.
let myarray = new array(값1, 값2, 값3, ...);

let myarray = [값1, 값2, 값3, 값4, ...];

4-3. 인덱스 번호를 갖는 데이터 저장소
- 생성된 배열은 각각의 칸은 0부터 일련변호가 지정된다.(일련번호 = 배열의 인덱스)

    let myarray = ["웹표준","HTML/CSS3", "반응형 웹"];

4-4. 배열 데이터의 접근
- 배열이름[인덱스 번호]